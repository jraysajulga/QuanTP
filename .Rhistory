set.seed(42)
ups_peps_20 <- ups_peptides[sample(nrow(ups_peptides), 10),]
non_ups_peps_20 <- non_ups_peptides[sample(nrow(non_ups_peptides), 10),]
twenty_peps <- rbind(ups_peps_20, non_ups_peps_20)
set.seed(24)
fivepep_df <- twenty_peps[sample(20,5),]
fivepep <- toString(fivepep_df$sequence)
fivepep
# Concatenates the two categories and writes it out in a text file for analysis
write.table(twenty_peps$sequence, "twenty_peptides.txt",
sep="\n", quote=FALSE, row.names=FALSE, col.names=FALSE)
# Creates the input files for metaGOmics i.e., single peptide with spectral count (# of validated PSMs)
go_input <- select(fivepep_df, sequence, counts)
for (i in 1:nrow(go_input)){
write.table(go_input[i,], paste('Data/metaGOmics/', go_input[i,]$sequence,".txt", sep=""),
sep="\t", eol = "\r\n", quote=FALSE, row.names=FALSE, col.names=FALSE)
}
peptide <- rep('', 5)
mg_go <- rep(0, 5)
dir <- 'results/metaGOmics/'
files <- list.files(dir)
for (i in 1:5){
peptide[i] <- fivepep[i]
result <- read.delim(paste(dir, paste(fivepep[i], '.txt', sep=""), sep=""),
stringsAsFactors = FALSE,
na.strings = c("", "NA", "NaN"),
comment.char = "#")
gos <- result$GO.acc
mg_go[i] <- paste(gos, collapse = "; ")
}
# Creates the input files for metaGOmics i.e., single peptide with spectral count (# of validated PSMs)
go_input <- select(fivepep_df, sequence, counts)
for (i in 1:nrow(go_input)){
write.table(go_input[i,], paste('Data/metaGOmics/', go_input[i,]$sequence,".txt", sep=""),
sep="\t", eol = "\r\n", quote=FALSE, row.names=FALSE, col.names=FALSE)
}
peptide <- rep(0, 5)
mg_go <- rep(0, 5)
dir <- 'results/metaGOmics/'
files <- list.files(dir)
for (i in 1:5){
peptide[i] <- fivepep[i]
result <- read.delim(paste(dir, paste(fivepep[i], '.txt', sep=""), sep=""),
stringsAsFactors = FALSE,
na.strings = c("", "NA", "NaN"),
comment.char = "#")
gos <- result$GO.acc
mg_go[i] <- paste(gos, collapse = "; ")
}
# Creates the input files for metaGOmics i.e., single peptide with spectral count (# of validated PSMs)
go_input <- select(fivepep_df, sequence, counts)
for (i in 1:nrow(go_input)){
write.table(go_input[i,], paste('Data/metaGOmics/', go_input[i,]$sequence,".txt", sep=""),
sep="\t", eol = "\r\n", quote=FALSE, row.names=FALSE, col.names=FALSE)
}
peptide <- rep(0, 5)
mg_go <- rep(0, 5)
dir <- 'results/metaGOmics/'
files <- list.files(dir)
for (i in 1:5){
peptide[i] <- fivepep[i]
result <- read.delim(paste(dir, paste(fivepep[i], '.txt', sep=""), sep=""),
stringsAsFactors = FALSE,
na.strings = c("", "NA", "NaN"),
comment.char = "#")
gos <- result$GO.acc
mg_go[i] <- paste(gos, collapse = "; ")
}
# Creates the input files for metaGOmics i.e., single peptide with spectral count (# of validated PSMs)
go_input <- select(fivepep_df, sequence, counts)
for (i in 1:nrow(go_input)){
write.table(go_input[i,], paste('Data/metaGOmics/', go_input[i,]$sequence,".txt", sep=""),
sep="\t", eol = "\r\n", quote=FALSE, row.names=FALSE, col.names=FALSE)
}
peptide <- rep(0, 5)
fivepep
mg_go <- rep(0, 5)
dir <- 'results/metaGOmics/'
files <- list.files(dir)
for (i in 1:5){
peptide[i] <- fivepep[i]
result <- read.delim(paste(dir, paste(fivepep[i], '.txt', sep=""), sep=""),
stringsAsFactors = FALSE,
na.strings = c("", "NA", "NaN"),
comment.char = "#")
gos <- result$GO.acc
mg_go[i] <- paste(gos, collapse = "; ")
}
# Obtains peptide report
peptide_report <- read.csv("Data/UPS/UPS1/UPS1_03-Peptide_Shaker_on_data_23__Peptide_Report.tabular",
sep = "\t", comment.char="", header = TRUE) %>%
select(proteins = Protein.s.,
sequence = Sequence,
counts = X.Validated.PSMs)
# Splits into UPS peptides and non-UPS peptides
ups_peptides <- filter(peptide_report, grepl("ups", proteins))
non_ups_peptides <- filter(peptide_report, !grepl("ups", proteins))
# Randomly selects 10 from each category
set.seed(42)
ups_peps_20 <- ups_peptides[sample(nrow(ups_peptides), 10),]
non_ups_peps_20 <- non_ups_peptides[sample(nrow(non_ups_peptides), 10),]
twenty_peps <- rbind(ups_peps_20, non_ups_peps_20)
set.seed(24)
fivepep_df <- twenty_peps[sample(20,5),]
fivepep <- fivepep_df$sequence
fivepep
# Concatenates the two categories and writes it out in a text file for analysis
write.table(twenty_peps$sequence, "twenty_peptides.txt",
sep="\n", quote=FALSE, row.names=FALSE, col.names=FALSE)
# Creates the input files for metaGOmics i.e., single peptide with spectral count (# of validated PSMs)
go_input <- select(fivepep_df, sequence, counts)
for (i in 1:nrow(go_input)){
write.table(go_input[i,], paste('Data/metaGOmics/', go_input[i,]$sequence,".txt", sep=""),
sep="\t", eol = "\r\n", quote=FALSE, row.names=FALSE, col.names=FALSE)
}
peptide <- rep(0, 5)
mg_go <- rep(0, 5)
dir <- 'results/metaGOmics/'
files <- list.files(dir)
for (i in 1:5){
peptide[i] <- fivepep[i]
result <- read.delim(paste(dir, paste(fivepep[i], '.txt', sep=""), sep=""),
stringsAsFactors = FALSE,
na.strings = c("", "NA", "NaN"),
comment.char = "#")
gos <- result$GO.acc
mg_go[i] <- paste(gos, collapse = "; ")
}
mg <- data.frame(peptide, mg_go, stringsAsFactors = FALSE)
mg
# Creates the input files for metaGOmics i.e., single peptide with spectral count (# of validated PSMs)
go_input <- select(fivepep_df, sequence, counts)
for (i in 1:nrow(go_input)){
write.table(go_input[i,], paste('Data/metaGOmics/', go_input[i,]$sequence,".txt", sep=""),
sep="\t", eol = "\r\n", quote=FALSE, row.names=FALSE, col.names=FALSE)
}
peptide <- rep("", 5)
mg_go <- rep(0, 5)
dir <- 'results/metaGOmics/'
files <- list.files(dir)
for (i in 1:5){
peptide[i] <- fivepep[i]
result <- read.delim(paste(dir, paste(fivepep[i], '.txt', sep=""), sep=""),
stringsAsFactors = FALSE,
na.strings = c("", "NA", "NaN"),
comment.char = "#")
gos <- result$GO.acc
mg_go[i] <- paste(gos, collapse = "; ")
}
mg <- data.frame(peptide, mg_go, stringsAsFactors = FALSE)
mg
# Obtains peptide report
peptide_report <- read.csv("Data/UPS/UPS1/UPS1_03-Peptide_Shaker_on_data_23__Peptide_Report.tabular",
sep = "\t", comment.char="", header = TRUE) %>%
select(proteins = Protein.s.,
sequence = Sequence,
counts = X.Validated.PSMs)
peptide_report
# Splits into UPS peptides and non-UPS peptides
ups_peptides <- filter(peptide_report, grepl("ups", proteins))
non_ups_peptides <- filter(peptide_report, !grepl("ups", proteins))
# Randomly selects 10 from each category
set.seed(42)
ups_peps_20 <- ups_peptides[sample(nrow(ups_peptides), 10),]
non_ups_peps_20 <- non_ups_peptides[sample(nrow(non_ups_peptides), 10),]
twenty_peps <- rbind(ups_peps_20, non_ups_peps_20)
set.seed(24)
fivepep_df <- twenty_peps[sample(20,5),]
fivepep <- fivepep_df$sequence
# Concatenates the two categories and writes it out in a text file for analysis
write.table(twenty_peps$sequence, "twenty_peptides.txt",
sep="\n", quote=FALSE, row.names=FALSE, col.names=FALSE)
# Obtains peptide report
peptide_report <- read.csv("Data/UPS/UPS1/UPS1_03-Peptide_Shaker_on_data_23__Peptide_Report.tabular",
sep = "\t", comment.char="", header = TRUE) %>%
select(proteins = Protein.s.,
sequence = Sequence,
counts = X.Validated.PSMs)
# Splits into UPS peptides and non-UPS peptides
ups_peptides <- filter(peptide_report, grepl("ups", proteins))
non_ups_peptides <- filter(peptide_report, !grepl("ups", proteins))
# Randomly selects 10 from each category
set.seed(42)
ups_peps_20 <- ups_peptides[sample(nrow(ups_peptides), 10),]
non_ups_peps_20 <- non_ups_peptides[sample(nrow(non_ups_peptides), 10),]
twenty_peps <- rbind(ups_peps_20, non_ups_peps_20)
set.seed(24)
fivepep_df <- twenty_peps[sample(20,5),]
fivepep <- fivepep_df$sequence
typeof(fivepep_df$sequence)
# Concatenates the two categories and writes it out in a text file for analysis
write.table(twenty_peps$sequence, "twenty_peptides.txt",
sep="\n", quote=FALSE, row.names=FALSE, col.names=FALSE)
# Obtains peptide report
peptide_report <- read.csv("Data/UPS/UPS1/UPS1_03-Peptide_Shaker_on_data_23__Peptide_Report.tabular",
sep = "\t", comment.char="", header = TRUE) %>%
select(proteins = Protein.s.,
sequence = Sequence,
counts = X.Validated.PSMs)
# Splits into UPS peptides and non-UPS peptides
ups_peptides <- filter(peptide_report, grepl("ups", proteins))
non_ups_peptides <- filter(peptide_report, !grepl("ups", proteins))
# Randomly selects 10 from each category
set.seed(42)
ups_peps_20 <- ups_peptides[sample(nrow(ups_peptides), 10),]
non_ups_peps_20 <- non_ups_peptides[sample(nrow(non_ups_peptides), 10),]
twenty_peps <- rbind(ups_peps_20, non_ups_peps_20)
set.seed(24)
fivepep_df <- twenty_peps[sample(20,5),]
fivepep <- fivepep_df$sequence
fivepep
# Concatenates the two categories and writes it out in a text file for analysis
write.table(twenty_peps$sequence, "twenty_peptides.txt",
sep="\n", quote=FALSE, row.names=FALSE, col.names=FALSE)
# Obtains peptide report
peptide_report <- read.csv("Data/UPS/UPS1/UPS1_03-Peptide_Shaker_on_data_23__Peptide_Report.tabular",
sep = "\t", comment.char="", header = TRUE) %>%
select(proteins = Protein.s.,
sequence = Sequence,
counts = X.Validated.PSMs)
# Splits into UPS peptides and non-UPS peptides
ups_peptides <- filter(peptide_report, grepl("ups", proteins))
non_ups_peptides <- filter(peptide_report, !grepl("ups", proteins))
# Randomly selects 10 from each category
set.seed(42)
ups_peps_20 <- ups_peptides[sample(nrow(ups_peptides), 10),]
non_ups_peps_20 <- non_ups_peptides[sample(nrow(non_ups_peptides), 10),]
twenty_peps <- rbind(ups_peps_20, non_ups_peps_20)
set.seed(24)
fivepep_df <- twenty_peps[sample(20,5),]
fivepep <- fivepep_df$sequence
typeof(fivepep)
typeof(c('sadf','asdf'))
# Concatenates the two categories and writes it out in a text file for analysis
write.table(twenty_peps$sequence, "twenty_peptides.txt",
sep="\n", quote=FALSE, row.names=FALSE, col.names=FALSE)
# Obtains peptide report
peptide_report <- read.csv("Data/UPS/UPS1/UPS1_03-Peptide_Shaker_on_data_23__Peptide_Report.tabular",
sep = "\t", comment.char="", header = TRUE, stringsAsFactors = FALSE) %>%
select(proteins = Protein.s.,
sequence = Sequence,
counts = X.Validated.PSMs)
# Splits into UPS peptides and non-UPS peptides
ups_peptides <- filter(peptide_report, grepl("ups", proteins))
non_ups_peptides <- filter(peptide_report, !grepl("ups", proteins))
# Randomly selects 10 from each category
set.seed(42)
ups_peps_20 <- ups_peptides[sample(nrow(ups_peptides), 10),]
non_ups_peps_20 <- non_ups_peptides[sample(nrow(non_ups_peptides), 10),]
twenty_peps <- rbind(ups_peps_20, non_ups_peps_20)
set.seed(24)
fivepep_df <- twenty_peps[sample(20,5),]
fivepep <- fivepep_df$sequence
# Concatenates the two categories and writes it out in a text file for analysis
write.table(twenty_peps$sequence, "twenty_peptides.txt",
sep="\n", quote=FALSE, row.names=FALSE, col.names=FALSE)
# Obtains peptide report
peptide_report <- read.csv("Data/UPS/UPS1/UPS1_03-Peptide_Shaker_on_data_23__Peptide_Report.tabular",
sep = "\t", comment.char="", header = TRUE, stringsAsFactors = FALSE) %>%
select(proteins = Protein.s.,
sequence = Sequence,
counts = X.Validated.PSMs)
# Splits into UPS peptides and non-UPS peptides
ups_peptides <- filter(peptide_report, grepl("ups", proteins))
non_ups_peptides <- filter(peptide_report, !grepl("ups", proteins))
# Randomly selects 10 from each category
set.seed(42)
ups_peps_20 <- ups_peptides[sample(nrow(ups_peptides), 10),]
non_ups_peps_20 <- non_ups_peptides[sample(nrow(non_ups_peptides), 10),]
twenty_peps <- rbind(ups_peps_20, non_ups_peps_20)
set.seed(24)
fivepep_df <- twenty_peps[sample(20,5),]
fivepep <- fivepep_df$sequence
typeof(fivepep)
# Concatenates the two categories and writes it out in a text file for analysis
write.table(twenty_peps$sequence, "twenty_peptides.txt",
sep="\n", quote=FALSE, row.names=FALSE, col.names=FALSE)
# Creates the input files for metaGOmics i.e., single peptide with spectral count (# of validated PSMs)
go_input <- select(fivepep_df, sequence, counts)
for (i in 1:nrow(go_input)){
write.table(go_input[i,], paste('Data/metaGOmics/', go_input[i,]$sequence,".txt", sep=""),
sep="\t", eol = "\r\n", quote=FALSE, row.names=FALSE, col.names=FALSE)
}
peptide <- rep("", 5)
mg_go <- rep(0, 5)
dir <- 'results/metaGOmics/'
files <- list.files(dir)
for (i in 1:5){
peptide[i] <- fivepep[i]
result <- read.delim(paste(dir, paste(fivepep[i], '.txt', sep=""), sep=""),
stringsAsFactors = FALSE,
na.strings = c("", "NA", "NaN"),
comment.char = "#")
gos <- result$GO.acc
mg_go[i] <- paste(gos, collapse = "; ")
}
mg <- data.frame(peptide, mg_go, stringsAsFactors = FALSE)
mg
# Creates the input files for metaGOmics i.e., single peptide with spectral count (# of validated PSMs)
go_input <- select(fivepep_df, sequence, counts)
for (i in 1:nrow(go_input)){
write.table(go_input[i,], paste('Data/metaGOmics/', go_input[i,]$sequence,".txt", sep=""),
sep="\t", eol = "\r\n", quote=FALSE, row.names=FALSE, col.names=FALSE)
}
peptide <- rep(0, 5)
mg_go <- rep(0, 5)
dir <- 'results/metaGOmics/'
files <- list.files(dir)
for (i in 1:5){
peptide[i] <- fivepep[i]
result <- read.delim(paste(dir, paste(fivepep[i], '.txt', sep=""), sep=""),
stringsAsFactors = FALSE,
na.strings = c("", "NA", "NaN"),
comment.char = "#")
gos <- result$GO.acc
mg_go[i] <- paste(gos, collapse = "; ")
}
mg <- data.frame(peptide, mg_go, stringsAsFactors = FALSE)
mg
all_results <- plyr::join_all(list(em, mg, uni), by = "peptide")
library(pander)
knitr::kable(all_results)
cov_pat <- "\ \\(.{2,4}\\)"
uni <- read.csv('results/unipept/UPS2_04-Unipept-20pep-42seed.csv',
stringsAsFactors = FALSE) %>%
select(peptide,
uni_go_bp = GO..biological.process.,
uni_go_mf = GO..molecular.function.,
uni_go_cc = GO..cellular.component.) %>%
filter(peptide %in% fivepep) %>%
mutate(uni_go_bp = str_replace_all(string = uni_go_bp, pattern = cov_pat, replacement = ""),
uni_go_mf = str_replace_all(string = uni_go_mf, pattern = cov_pat, replacement = ""),
uni_go_cc = str_replace_all(string = uni_go_cc, pattern = cov_pat, replacement = ""))
uni
all_results <- plyr::join_all(list(em, mg, uni), by = "peptide")
library(pander)
knitr::kable(all_results)
all_results[1, 'peptide']
all_results[1, 'peptide']
buni <- all_results[1, 'blast_go']
buni
# Obtains peptide report
peptide_report <- read.csv("Data/UPS/UPS1/UPS1_03-Peptide_Shaker_on_data_23__Peptide_Report.tabular",
sep = "\t", comment.char="", header = TRUE, stringsAsFactors = FALSE) %>%
select(proteins = Protein.s.,
sequence = Sequence,
counts = X.Validated.PSMs)
# Splits into UPS peptides and non-UPS peptides
ups_peptides <- filter(peptide_report, grepl("ups", proteins))
non_ups_peptides <- filter(peptide_report, !grepl("ups", proteins))
# Randomly selects 10 from each category
set.seed(42)
ups_peps_20 <- ups_peptides[sample(nrow(ups_peptides), 10),]
non_ups_peps_20 <- non_ups_peptides[sample(nrow(non_ups_peptides), 10),]
twenty_peps <- rbind(ups_peps_20, non_ups_peps_20)
set.seed(24)
fivepep_df <- twenty_peps[sample(20,5),]
fivepep <- fivepep_df$sequence
# Concatenates the two categories and writes it out in a text file for analysis
write.table(twenty_peps$sequence, "twenty_peptides.txt",
sep="\n", quote=FALSE, row.names=FALSE, col.names=FALSE)
# Obtains peptide report
peptide_report <- read.csv("Data/UPS/UPS1/UPS1_03-Peptide_Shaker_on_data_23__Peptide_Report.tabular",
sep = "\t", comment.char="", header = TRUE, stringsAsFactors = FALSE) %>%
select(proteins = Protein.s.,
sequence = Sequence,
counts = X.Validated.PSMs)
# Splits into UPS peptides and non-UPS peptides
ups_peptides <- filter(peptide_report, grepl("ups", proteins))
non_ups_peptides <- filter(peptide_report, !grepl("ups", proteins))
# Randomly selects 10 from each category
set.seed(42)
ups_peps_20 <- ups_peptides[sample(nrow(ups_peptides), 10),]
non_ups_peps_20 <- non_ups_peptides[sample(nrow(non_ups_peptides), 10),]
twenty_peps <- rbind(ups_peps_20, non_ups_peps_20)
set.seed(24)
fivepep_df <- twenty_peps[sample(20,5),]
fivepep <- fivepep_df$sequence
# Concatenates the two categories and writes it out in a text file for analysis
write.table(twenty_peps$sequence, "twenty_peptides.txt",
sep="\n", quote=FALSE, row.names=FALSE, col.names=FALSE)
# Obtains peptide report
peptide_report <- read.csv("Data/UPS/UPS1/UPS1_03-Peptide_Shaker_on_data_23__Peptide_Report.tabular",
sep = "\t", comment.char="", header = TRUE, stringsAsFactors = FALSE) %>%
select(proteins = Protein.s.,
sequence = Sequence,
counts = X.Validated.PSMs)
# Splits into UPS peptides and non-UPS peptides
ups_peptides <- filter(peptide_report, grepl("ups", proteins))
non_ups_peptides <- filter(peptide_report, !grepl("ups", proteins))
# Randomly selects 10 from each category
set.seed(42)
ups_peps_20 <- ups_peptides[sample(nrow(ups_peptides), 10),]
non_ups_peps_20 <- non_ups_peptides[sample(nrow(non_ups_peptides), 10),]
twenty_peps <- rbind(ups_peps_20, non_ups_peps_20)
set.seed(24)
fivepep_df <- twenty_peps[sample(20,5),]
fivepep <- fivepep_df$sequence
# Concatenates the two categories and writes it out in a text file for analysis
write.table(twenty_peps$sequence, "twenty_peptides.txt",
sep="\n", quote=FALSE, row.names=FALSE, col.names=FALSE)
fivepep_df
peptide_report
all_results <- plyr::join_all(list(em, mg, uni), by = "peptide")
proteins <- select(peptide_report,
proteins
peptide = sequence) %>%
proteins <- select(peptide_report,
proteins,
peptide = sequence) %>%
filter(peptide %in% fivepep) %>%
proteins
peptide_report
proteins <- select(peptide_report,
proteins,
peptide = sequence) %>%
filter(peptide %in% fivepep) %>%
proteins
peptide_report
proteins <- select(peptide_report,
protein = proteins,
peptide = sequence) %>%
filter(peptide %in% fivepep) %>%
proteins
peptide_report
proteins <- select(peptide_report,
sequence,
peptide = sequence) %>%
filter(peptide %in% fivepep) %>%
proteins
peptide_report
pepprots <- select(peptide_report,
proteins,
peptide = sequence) %>%
filter(peptide %in% fivepep) %>%
pepprots
peptide_report
pepprots <- select(peptide_report,
proteins,
peptide = sequence) %>%
filter(peptide %in% fivepep)
pepprots
all_results <- plyr::join_all(list(em, mg, uni), by = "peptide")
peptide_report
pepprots <- select(peptide_report,
proteins,
peptide = sequence) %>%
filter(peptide %in% fivepep)
pepprots
all_results <- plyr::join_all(list(pepprots, em, mg, uni), by = "peptide")
all_results
library(pander)
knitr::kable(all_results)
library(pander)
knitr::kable(all_results)
source('~/Galaxy/omicron-main_17.05/tools/quantp/quantp.r', echo=TRUE)
install.packages("data.table", dependencies=TRUE)
install.packages("gplots", dependencies=TRUE)
install.packages("ggplot2", dependencies=TRUE)
install.packages("ggfortify", dependencies=TRUE)
lines <- readLines('test-files//Box_TE_rep.html')
linesdf <- data.frame(lines)
script <- filter(linesdf, grepl('script',lines))
lines <- readLines('test-files//Box_TE_rep.html')
linesdf <- data.frame(lines) %>%
filter(grepl('script',lines))
lines <- readLines('test-files//Box_TE_rep.html')
linesdf <- data.frame(lines)
filter(linesdf, grepl('script',lines))
script
lines <- readLines('test-files//Box_TE_rep.html')
linesdf <- data.frame(lines)
script <- filter(linesdf, grepl('script',lines))
script
lines <- readLines('test-files//Box_TE_rep.html')
linesdf <- data.frame(lines)
script <- filter(linesdf, grepl('script',lines))
#script
lines <- readLines('test-files//Box_TE_rep.html')
linesdf <- data.frame(lines)
script <- filter(linesdf, grepl('script',lines))
script
lines <- readLines('test-files//Box_TE_rep.html')
linesdf <- data.frame(lines)
script <- filter(linesdf, !grepl('script',lines))
script
lines <- readLines('test-files//Box_TE_rep.html')
linesdf <- data.frame(lines)
script <- filter(linesdf, grepl('script',lines))
script
lines <- readLines('test-files//Box_TE_rep.html')
linesdf <- data.frame(lines)
script <- filter(lines, grepl('script',lines))
script
lines <- readLines('test-files//Box_TE_rep.html')
linesdf <- data.frame(lines)
linesdf
script <- filter(linesdf, grepl('script',lines))
#script
lines <- as.data.frame(readLines('test-files//Box_TE_rep.html'))
script <- filter(lines, grepl('script',lines))
script
library(htmlwidgets)
library(plotly)
lines <- as.data.frame(readLines('test-files//Box_TE_rep.html'))
script <- filter(lines, grepl('script',lines))
script
library(htmlwidgets)
library(plotly)
lines <- as.data.frame(readLines('test-files//Box_TE_rep.html'))
script <- filter(lines, grepl('script',lines))
script
